[tool.poetry]
name = "backend"
version = "0.1.0"
description = ""
authors = ["matsunagadaiki151"]
packages = [
    { include = "schema", from = "src" },
    { include = "routers", from = "src" },
    { include = "services", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.11.1"
fastapi = "^0.100.0"
uvicorn = "^0.23.0"
python-dotenv = "^1.0.0"
sphinx = "^7.0.1"
sphinx-pyproject = "^0.1.0"
langchain = "^0.0.236"
openai = "^0.27.8"
chromadb = "0.3.23"
tiktoken = "^0.4.0"

[tool.poetry.group.dev.dependencies]
flake8 = "^6.0.0"
flake8-isort = "^6.0.0"
flake8-bugbear = "^23.7.10"
flake8-builtins = "^2.1.0"
flake8-eradicate = "^1.5.0"
flake8-unused-arguments = "^0.0.13"
flake8-pytest-style = "^1.7.2"
pep8-naming = "^0.13.3"
mypy = "^1.4.1"
black = "^23.7.0"
isort = "^5.12.0"
pytest = "^7.4.0"
pytest-mock = "^3.11.1"
pytest-cov = "^4.1.0"
taskipy = "^1.11.0"
pre-commit = "^3.3.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
# エラー時のメッセージを詳細表示
show_error_context = true
# エラー発生箇所の行数/列数を表示
show_column_numbers = true
# import 先のチェックを行わない (デフォルトだとサードパーティーライブラリまでチェックする)
ignore_missing_imports = true
# 関数定義の引数/戻り値に型アノテーション必須
disallow_untyped_defs = true
# デフォルト引数に None を取る場合型アノテーションに Optional 必須
no_implicit_optional = true
# 戻り値が Any 型ではない関数の戻り値の型アノテーションが Any のとき警告
warn_return_any = true
# mypy エラーに該当しない箇所に `# type: ignore` コメントが付与されていたら警告
# ※ `# type: ignore` が付与されている箇所は mypy のエラーを無視出来る
warn_unused_ignores = true
# 冗長なキャストに警告
warn_redundant_casts = true

[tool.black]
line-length = 79

[tool.isort]
profile = "black"
line_length = 79

[project]
name = "python-template"
version = "0.1.0"
description = "Python Project の Template"

[[project.authors]]
name = "jDBTISK"

[tool.sphinx-pyproject]
project = "python-template"
copyright = "2022, jDBTISK"
language = "en"
package_root = "python-template"
html_theme = "sphinx_rtd_theme"
todo_include_todos = true
templates_path = ["_templates"]
html_static_path = ["_static"]
extensions = [
  "sphinx.ext.autodoc",
  "sphinx.ext.viewcode",
  "sphinx.ext.todo",
  "sphinx.ext.napoleon",
]

[tool.taskipy.tasks]
test = "pytest -s -vv --cov=. --cov-branch --cov-report=html"
fmt = "task fmt-black && task fmt-isort"
fmt-black = "black src tests"
fmt-isort = "isort src tests"
lint = "task lint-black && task lint-flake8 && task lint-mypy"
lint-flake8 = "flake8 src tests"
lint-mypy = "mypy src tests"
lint-black = "black --check src tests"
docs = "sphinx-apidoc -F -o docs/source src && sphinx-build docs/source docs/build"
